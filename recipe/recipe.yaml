schema_version: 1

context:
  libc_version: 1.0.1post1
  build_number: 3
  py_build_number: 0
  py_version: 0.0.1

source:
  url: https://github.com/welch-lab/libplanc/archive/refs/heads/master.tar.gz
  sha256: 6eeb753355e78ae4b58666cd96354a0d3f9a24ad7c53be2a0652d5a1519f1ec1

build:
  number: ${{ build_number }}

outputs:
  - package:
      name: libplanc
      version: ${{ libc_version|replace("-", "_") }}
    requirements:
      build:
        - if: unix or (is_mingw == 'mingw_')
          then: make
        - if: is_mingw == 'mingw_'
          then:
            - ${{ compiler('m2w64_c') }}
            - ${{ stdlib("m2w64_c") }}
            - ${{ compiler('m2w64_cxx') }}
          else:
            - ${{ compiler('c') }}
            - ${{ stdlib("c") }}
            - ${{ compiler('cxx') }}
        - if: (c_compiler == 'gcc') or (is_mingw == 'mingw_')
          then: libgomp
          else: llvm-openmp
        - cmake
        - pkg-config
        - if: is_mingw == 'mingw_'
          then:
            - libgcc <15
            - libgomp <15
      host:
        - libhwloc >=2.0.0,<3.0.0
        - zlib
        - hdf5 >=1.10
        - if: (c_compiler == 'gcc') or (is_mingw == 'mingw_')
          then: libgomp
          else: llvm-openmp
        - libblas
        - libcblas
        - liblapack
        - libtmglib
        - indicators
        - armadillo
        - cpp-argparse
        - if: win
          then: dlfcn-win32
        - if: is_mingw == 'mingw_'
          then:
            - libgcc <15
            - libgomp <15

      run:
        - if: osx and arm64
          then: libblas * *accelerate
          else: libblas
        - if: is_mingw == 'mingw_'
          then:
            - libgcc <15
            - libgomp <15
      run_exports:
        - ${{ pin_subpackage('libplanc', exact=True) }}
    build:
      number: ${{ build_number }}
      string: ${{ is_mingw }}h${{ hash }}_${{ build_number }}
      script:
      - if: linux and (build_platform != target_platform)
        then:
          - cmake -S $SRC_DIR -DHDF5_LINKS_EXITCODE=0 -DBUILD_EXECUTABLE=ON -DBLA_VENDOR="Generic" $CMAKE_ARGS
          - cmake --build .
          - cmake --install .
      - if: linux and (build_platform == target_platform)
        then:
          - cmake -S $SRC_DIR -DBUILD_EXECUTABLE=ON -DBLA_VENDOR="Generic" $CMAKE_ARGS
          - cmake --build .
          - cmake --install .
      - if: osx and (build_platform != target_platform)
        then:
          - cmake -E env CXXFLAGS=-D_LIBCPP_DISABLE_AVAILABILITY cmake -S $SRC_DIR -DHDF5_LINKS_EXITCODE=0 -DBUILD_EXECUTABLE=ON $CMAKE_ARGS
          - cmake --build .
          - cmake --install .
      - if: osx and (build_platform == target_platform)
        then:
          - cmake -E env CXXFLAGS=-D_LIBCPP_DISABLE_AVAILABILITY cmake -S $SRC_DIR -DBUILD_EXECUTABLE=ON $CMAKE_ARGS
          - cmake --build .
          - cmake --install .
      - if: win and (is_mingw == 'vs_')
        then:
          - cmake -S %SRC_DIR% -DCBLAS_H_DIR=%LIBRARY_INC% -DBUILD_EXECUTABLE=ON %CMAKE_ARGS%
          - cmake --build . --config Release
          - cmake --install .
      - if: win and (is_mingw == 'mingw_')
        then:
          - cmake -G "Unix Makefiles" -S %SRC_DIR% -DCBLAS_H_DIR=%LIBRARY_INC% -DBUILD_EXECUTABLE=ON -DCMAKE_INSTALL_PREFIX="%PREFIX%/Library" %CMAKE_ARGS%
          - cmake --build .
          - cmake --install .
    tests:
      - script:
          - plancnmf --help
    #  - package_contents:'/'
    #      lib:
    #        - nmflib
  - package:
      name: pyplanc
      version: ${{ py_version|replace("-", "_") }}
    build:
      skip: is_mingw == 'mingw_'
      number: ${{ py_build_number }}
      string: ${{ python | version_to_buildstring }}_h${{ hash }}_${{ py_build_number }}
      script:
        - if: osx and (build_platform != target_platform)
          then:
          - export SKBUILD_CMAKE_ARGS="-DHDF5_LINKS=1 -DHDF5_LINKS_EXITCODE='0' $CMAKE_ARGS"
          - export MACOSX_DEPLOYMENT_TARGET=11.0
          - export CXXFLAGS=-D_LIBCPP_DISABLE_AVAILABILITY
          - pip install . -vv --no-deps --no-build-isolation --config-settings=build.targets=pyplanc
        - if: osx and (build_platform == target_platform)
          then:
          - export SKBUILD_CMAKE_ARGS="$CMAKE_ARGS"
          - export MACOSX_DEPLOYMENT_TARGET=11.0
          - export CXXFLAGS=-D_LIBCPP_DISABLE_AVAILABILITY
          - pip install . -vv --no-deps --no-build-isolation --config-settings=build.targets=pyplanc
        - if: linux and (build_platform != target_platform)
          then:
          - export SKBUILD_CMAKE_ARGS="-DHDF5_LINKS=1 -DHDF5_LINKS_EXITCODE='0' -DBLA_VENDOR='Generic' $CMAKE_ARGS"
          - pip install . -vv --no-deps --no-build-isolation --config-settings=build.targets=pyplanc
        - if: linux and (build_platform == target_platform)
          then:
          - export SKBUILD_CMAKE_ARGS="$CMAKE_ARGS"
          - pip install . -vv --no-deps --no-build-isolation --config-settings=build.targets=pyplanc
        - if: win and (is_mingw == 'vs_')
          then:
          - set SKBUILD_CMAKE_ARGS="-DCBLAS_H_DIR=%LIBRARY_INC% %CMAKE_ARGS%"
          - pip install . -vv --no-deps --no-build-isolation --config-settings=build.targets=pyplanc
    requirements:
      build:
        - if: unix
          then: make
          else: ninja
        - ${{ compiler('c') }}
        - ${{ stdlib("c") }}
        - ${{ compiler('cxx') }}
        - if: (c_compiler == 'gcc')
          then: libgomp
          else: llvm-openmp
        - cmake
        - pkg-config
        - if: build_platform != target_platform
          then:
            - python
            - cross-python_${{ target_platform }}
      host:
        - ${{ pin_subpackage("libplanc", exact=True) }}
        - if: (c_compiler == 'gcc')
          then: libgomp
          else: llvm-openmp
        - if: osx and arm64
          then:
            - libblas * *accelerate
            - libcblas * *accelerate
            - liblapack * *accelerate
          else:
            - libblas
            - libcblas
            - liblapack
        - indicators
        - armadillo
        - nanobind
        - python
        - scipy
        - pip
        - scikit-build-core

      run:
        - if: osx and arm64
          then: libblas * *accelerate
          else: libblas
        - python
        - scipy
        - progressbar2
        - threadpoolctl
    tests:
      - python:
          imports:
            "pyplanc"
about:
  license: GPL-2.0-or-later
  summary: '''PLANC'', a highly parallel and extensible NMF/NTF  (Non-negative Matrix/Tensor Factorization) library. Wraps algorithms described in Kannan et. al (2018) <doi:10.1109/TKDE.2017.2767592> and Eswar et. al (2021) <doi:10.1145/3432185>. Implements algorithms described in Welch et al. (2019) <doi:10.1016/j.cell.2019.05.006>, Gao et al. (2021) <doi:10.1038/s41587-021-00867-x>, and Kriebel & Welch (2022) <doi:10.1038/s41467-022-28431-4>.'
  license_file:
    - README.md
  homepage: https://github.com/welch-lab/libplanc

extra:
  recipe-maintainers:
    - theAeon
